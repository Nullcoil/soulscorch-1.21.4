plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Crystal Nest repository where Soul Fire'd is hosted.
	exclusiveContent {
		forRepository {
			maven {
				name = "Crystal Nest"
				url = "https://maven.crystalnest.it"
			}
		}
		filter {
			includeGroup "it.crystalnest"
		}
	}

    maven { url = 'https://maven.minecraftforge.net/' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Soul Fire'd Fabric
	modImplementation "it.crystalnest:soul-fire-d-fabric:$minecraft_version-$soul_fire_d_version"

    // Cobweb (dependency for Soul Fire'd)
    modImplementation "it.crystalnest:cobweb-fabric:$minecraft_version-$cobweb_version"

    modImplementation "com.github.glitchfiend:TerraBlender-fabric:$minecraft_version-$terrablender_version"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

loom {
    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=soulscorch"

            runDir "build/datagen"
        }

        datagenClient {
            inherit client
            name "Data Generation Client"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=soulscorch"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += {
                'src/main/generated'
            }
        }
    }
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}

    task listDatagenTasks {
        doLast {
            println "Available tasks:"
            tasks.each {task ->
                if(Task.name.contains('datagen') || task.name.contains('Data')) {
                    println "  - ${task.name}"
                }
            }
        }
    }
}